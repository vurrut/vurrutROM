#!/system/bin/sh
#
# Tweaks introduced by Slaid's Lagfree V3: consolidated, extended
# and fixed errors: "One script to roll them all" - v1.2 (c)2012 Slaid480
#
# This script has been tested on the GT-I9003 only 
#Mod by vurrut

#sd


echo "3072" > /sys/devices/virtual/bdi/179:0/read_ahead_kb;
echo "3072" > /sys/devices/virtual/bdi/179:16/read_ahead_kb;

ZALOG_FILE=/data/zipalign.log ;
ZIPALIGNDB=/data/zipalign.dbs ;
LOOP=`ls -d /sys/block/loop*`;
BDI=`ls -d /sys/devices/virtual/bdi/*`;
RAM=`ls -d /sys/block/ram*`;
MMC=`ls -d /sys/block/mmc*`;
STL=`ls -d /sys/block/stl*`;
BML=`ls -d /sys/block/bml*`;

# bootloop recovery inspired by iandol. Thanks.
if [ -e /data/lagfree_recovery ]; then
   if [ -s /data/lagfree_recovery ]; then
      $L "
      sync
      sleep 5
      exit
   fi;
else
   touch /data/lagfree_recovery
   $L "LagFree recovery file created..."
fi;

# redirecting all output to "/data/S99_LagFree.log" if debug flag file exists
if [ -e /data/lagfree_debug ]; then
     rm -f /data/lagfree_debug.log
     LOG=/data/lagfree_debug.log
     echo "Script starting @ `date`" >> $LOG
     echo "Build: `getprop ro.build.version.release`" >> $LOG
     echo "Mod: `getprop ro.modversion`" >> $LOG
     echo "Kernel: `uname -r`" >> $LOG
     exec >> $LOG 2>&1
     set -x
fi;

# remount noatime
$L "Remounting file system for tweaks..."
sync
mount -o remount,rw,noatime,nodiratime,norelatime,barrier=0,noauto_da_alloc,nobh -t rootfs /
mount -o remount,rw,noatime,nodiratime,norelatime,noauto_da_alloc,barrier=0,nobh /dev/block/stl12 /system
mount -o remount,rw,noatime,nodiratime,norelatime,noauto_da_alloc,barrier=0,nobh /dev/block/stl13 /data
mount -o remount,rw,noatime,nodiratime,norelatime,noauto_da_alloc,barrier=0,nobh /dev/block/stl14 /cache

# set caches to 4mb
$L "Applying cache tweaks..."
for i in $BDI; do
    if [ -e $i/read_ahead_kb ]; then
	echo 4096 > $i/read_ahead_kb;
    fi;
done;

# set scheduler to NOOP
$L "Applying scheduler tweaks..."
for a in $LOOP $MMC $STL $BML $RAM; do
    if [ -e $a/queue/read_ahead_kb ]; then
	echo 4096 > $a/queue/read_ahead_kb;
    fi;
    if [ -e $a/queue/rotational ]; then
	echo 0 > $a/queue/rotational;
    fi;
    if [ -e $a/queue/nr_requests ]; then
	echo 8192 > $a/queue/nr_requests;
    fi;
    if [ -e $a/queue/iosched/low_latency ]; then
	echo 1 > $a/queue/iosched/low_latency;
    fi;
    if [ -e $a/queue/iosched/back_seek_penalty ]; then
	echo 1 > $a/queue/iosched/back_seek_penalty;
    fi;
    if [ -e $a/queue/iosched/back_seek_max ]; then
	echo 1000000000 > $a/queue/iosched/back_seek_max;
    fi;
    if [ -e $a/queue/iosched/slice_idle ]; then
	echo 0 > $a/queue/iosched/slice_idle;
    fi;
    if [ -e $a/queue/iosched/quantum ]; then
	echo 8 > $a/queue/iosched/quantum;
    fi;
    if [ -e $a/queue/iosched/fifo_batch ]; then
	echo 1 > $a/queue/iosched/fifo_batch;
    fi;
    if [ -e $a/queue/iosched/writes_starved ]; then
        echo 1 > $a/queue/iosched/writes_starved;
    fi;
    if [ -e $a/queue/iosched/rev_penalty ]; then
        echo 1 > $a/queue/iosched/rev_penalty;
    fi;
    if [ -e $a/queue/rq_affinity ]; then
        echo 1 > $a/queue/rq_affinity;
    fi;
    if [ -e $a/queue/iostats 

# set memory tweaks (minfree)
$L "Applying memory tweaks..."
if [ -e /sys/module/lowmemorykiller/parameters/adj ]; then
	echo "0,1,2,4,6,15" > /sys/module/lowmemorykiller/parameters/adj;
fi;
if [ -e /sys/module/lowmemorykiller/parameters/minfree ]; then
	echo "2560,4096,5632,10240,12800,20480" > /sys/module/lowmemorykiller/parameters/minfree;
fi;
if [ -e /proc/sys/vm/min_free_kbytes ]; then
        echo "4096" > /proc/sys/vm/min_free_kbytes;
fi;
if [ -e /proc/sys/vm/vfs_cache_pressure ]; then
	echo "20" > /proc/sys/vm/vfs_cache_pressure;
fi;
if [ -e /proc/sys/vm/dirty_expire_centisecs ]; then
	echo "3000" > /proc/sys/vm/dirty_expire_centisecs;
fi
if [ -e /proc/sys/vm/dirty_writeback_centisecs ]; then
	echo "500" > /proc/sys/vm/dirty_writeback_centisecs;
fi;
if [ -e /proc/sys/vm/dirty_ratio ]; then
	echo "80" > /proc/sys/vm/dirty_ratio;
fi;
if [ -e /proc/sys/vm/dirty_background_ratio ]; 


# apply sysctl settings from /etc/sysctl.conf 
$L "Applying sysctl tweaks..."
if [ -e /etc/sysctl.conf ]; then
    sysctl -p /etc/sysctl.conf;
fi;

# kernel tweaks
$L "Applying kernel tweaks..."
if [ -e /proc/sys/kernel/sched_latency_ns ]; then
	echo "20000000" > /proc/sys/kernel/sched_latency_ns;
fi;
if [ -e /proc/sys/kernel/sched_wakeup_granularity_ns ]; then
	echo "2500000" > /proc/sys/kernel/sched_wakeup_granularity_ns;
fi;
if [ -e /proc/sys/kernel/sched_min_granularity_ns ]; then
	echo "1000000" > /proc/sys/kernel/sched_min_granularity_ns;
fi;
if [ -e /proc/sys/kernel/sem ]; then
	echo 500 512000 100 2048 > /proc/sys/kernel/sem;
fi;
if [ -e /proc/sys/kernel/shmmax ]; then
	echo 268435456 > /proc/sys/kernel/shmmax;
fi;
if [ -e /proc/sys/kernel/msgmni ]; then
	echo 1024 > /proc/sys/kernel/msgmni;
fi;

# database tweaks
$L "Applying database tweaks..."
for i in `find /data -iname "*.db"`; do
sqlite3 "$i" 'VACUUM;';
sqlite3 "$i" 'REINDEX;';
done;

# network tweaks
$L "Applying network tweaks..."
echo "0" > /proc/sys/net/ipv4/tcp_timestamps;
echo "1" > /proc/sys/net/ipv4/tcp_tw_reuse;
echo "1" > /proc/sys/net/ipv4/tcp_sack;
echo "1" > /proc/sys/net/ipv4/tcp_dsack;
echo "1" > /proc/sys/net/ipv4/tcp_tw_recycle;
echo "1" > /proc/sys/net/ipv4/tcp_window_scaling;
echo "5" > /proc/sys/net/ipv4/tcp_keepalive_probes;
echo "30" > /proc/sys/net/ipv4/tcp_keepalive_intvl;
echo "30" > /proc/sys/net/ipv4/tcp_fin_timeout;
echo "1" > /proc/sys/net/ipv4/tcp_moderate_rcvbuf;
echo "2" > /proc/sys/net/ipv4/tcp_synack_retries;
echo "4096" > /proc/sys/net/ipv4/tcp_max_syn_backlog;
echo "1" > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts; 
echo "1" > /proc/sys/net/ipv4/icmp_echo_ignore_all;
echo "1" >  /proc/sys/net/ipv4/icmp_ignore_bogus_error_responses;
echo "0" > /proc/sys/net/ipv4/ip_dynaddr;
echo "404480" > /proc/sys/net/core/wmem_max;
echo "404480" > /proc/sys/net/core/rmem_max;
echo "256960" > /proc/sys/net/core/rmem_default;
echo "256960" > /proc/sys/net/core/wmem_default;
echo "2500" > /proc/sys/net/core/netdev_max_backlog;
echo "4096,16384,404480" > /proc/sys/net/ipv4/tcp_wmem;
echo "4096,87380,404480" > /proc/sys/net/ipv4/tcp_rmem;

# build.prop tweaks - thanks to iandol for the limit check idea 
if [ $(getprop | wc -l) -lt 233 ]; then
	$L "Applying ALL prop tweaks..."
	# we got 14 slots to play with - apply all tweaks
	setprop ring.delay 1000;
	setprop ro.telephony.call_ring.delay 1000;
	setprop debug.sf.hw 1;
	setprop debug.performance.tuning 1;
	setprop video.accelerate.hw 1;
	setprop ro.ril.disable.power.collapse 0;
	setprop ro.HOME_APP_ADJ 1;
	setprop ro.HOME_APP_MEM 2048;
	setprop pm.sleep_mode 1;
	setprop dalvik.vm.startheapsize 72m;
	setprop dalvik.vm.heapsize 48m;
	setprop wifi.supplicant_scan_interval 60;
	setprop windowsmgr.max_events_per_sec 55;
	setprop windowsmgr.support_rotation_270 true;
fi;
if [ $(getprop | wc -l) -lt 240 ]; then
	$L "Applying SOME prop tweaks..."
	# we got 7 slots to play with - apply most needed tweaks
	setprop debug.sf.hw 1;
	setprop debug.performance.tuning 1;
	setprop video.accelerate.hw 1;
	setprop ro.ril.disable.power.collapse 0;
	setprop pm.sleep_mode 1;
	setprop wifi.supplicant_scan_interval 60;
	setprop windowsmgr.max_events_per_sec 55;
fi;

# miscellaneous tweaks
$L "Applying misc tweaks..."
echo 3 > /proc/sys/vm/page-cluster;
echo 0 > /proc/sys/vm/laptop_mode;
echo 1 > /proc/sys/vm/overcommit_memory;
echo 0 > /proc/sys/vm/oom_kill_allocating_task;
echo 0 > /proc/sys/vm/panic_on_oom;
echo 1 > /proc/sys/kernel/panic_on_oops;
echo 0 > /proc/sys/kernel/panic;

# automatic zipalign
$L "Starting automatic zipalign..."
if [ -e $ZALOG_FILE ]; then
	rm $ZALOG_FILE;
fi;
if [ ! -f $ZIPALIGNDB ]; then
	touch $ZIPALIGNDB;
fi;
echo "Starting FV Automatic ZipAlign $( date +"%m-%d-%Y %H:%M:%S" )" | tee -a $ZALOG_FILE

for DIR in /system/app /data/app /system/framework ; do
  cd $DIR
  for APK in *.apk ; do
    if [ $APK -ot $ZIPALIGNDB ] && [ $(grep "$DIR/$APK" $ZIPALIGNDB|wc -l) -gt 0 ] ; then
      echo "Already checked: $DIR/$APK" | tee -a $ZALOG_FILE
    else
      zipalign -c 4 $APK
      if [ $? -eq 0 ] ; then
        echo "Already aligned: $DIR/$APK" | tee -a $ZALOG_FILE
        grep "$DIR/$APK" $ZIPALIGNDB > /dev/null || echo $DIR/$APK >> $ZIPALIGNDB
      else
        echo "Now aligning: $DIR/$APK" | tee -a $ZALOG_FILE
        zipalign -f 4 $APK /cache/$APK
        busybox mount -o rw,remount /system
        cp -f -p /cache/$APK $APK
        busybox rm -f /cache/$APK
        grep "$DIR/$APK" $ZIPALIGNDB > /dev/null || echo $DIR/$APK >> $ZIPALIGNDB
      fi
    fi
  done
done

sync
mount -o ro,remount /system
touch $ZIPALIGNDB
echo "Automatic ZipAlign finished at $( date +"%m-%d-%Y %H:%M:%S" )" | tee -a $ZALOG_FILE

# drop caches
$L "Dropping caches..."
sync;
echo "3" > /proc/sys/vm/drop_caches;
sleep 1;
echo "1" > /proc/sys/vm/drop_caches;

# clean up
$L "Cleaning up..."
chmod 400 /data/system/usagestats/
rm -f /cache/*.apk
rm -f /cache/*.tmp
rm -f /data/dalvik-cache/*.apk
rm -f /data/dalvik-cache/*.tmp
rm -f /data/system/userbehavior.db
echo "script ran succesfully @`date`" >> /data/lagfree_recovery

#!/system/bin/sh
#Touchscreen (Slaid480)
#Configure touchscreen sensitivity
#Sensitive(Chainfire)

echo 7035 > /sys/class/touch/switch/set_touchscreen;
echo 8002 > /sys/class/touch/switch/set_touchscreen;
echo 11000 > /sys/class/touch/switch/set_touchscreen;
echo 13060 > /sys/class/touch/switch/set_touchscreen;
echo 14005 > /sys/class/touch/switch/set_touchscreen;
